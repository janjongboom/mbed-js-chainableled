/* Generated by https://github.com/janjongboom/mbed-js-wrapper-generator */

#include "jerryscript-mbed-util/logging.h"
#include "jerryscript-mbed-library-registry/wrap_tools.h"

#include "ChainableLED.h"

/**
 * ChainableLED#setColorRGB (native JavaScript method)
 */
DECLARE_CLASS_FUNCTION(ChainableLED, setColorRGB) {
    CHECK_ARGUMENT_COUNT(ChainableLED, setColorRGB, (args_count == 4));
    CHECK_ARGUMENT_TYPE_ALWAYS(ChainableLED, setColorRGB, 0, number);
    CHECK_ARGUMENT_TYPE_ALWAYS(ChainableLED, setColorRGB, 1, number);
    CHECK_ARGUMENT_TYPE_ALWAYS(ChainableLED, setColorRGB, 2, number);
    CHECK_ARGUMENT_TYPE_ALWAYS(ChainableLED, setColorRGB, 3, number);

    uintptr_t ptr_val;
    jerry_get_object_native_handle(this_obj, &ptr_val);

    ChainableLED* native_ptr = reinterpret_cast<ChainableLED*>(ptr_val);

    double jArg0 = jerry_get_number_value(args[0]);
    unsigned int arg0 = static_cast<unsigned int>(jArg0);
    double jArg1 = jerry_get_number_value(args[1]);
    uint8_t arg1 = static_cast<uint8_t>(jArg1);
    double jArg2 = jerry_get_number_value(args[2]);
    uint8_t arg2 = static_cast<uint8_t>(jArg2);
    double jArg3 = jerry_get_number_value(args[3]);
    uint8_t arg3 = static_cast<uint8_t>(jArg3);

    native_ptr->setColorRGB(arg0, arg1, arg2, arg3);
    return jerry_create_undefined();
}

/**
 * ChainableLED#setColorHSB (native JavaScript method)
 */
DECLARE_CLASS_FUNCTION(ChainableLED, setColorHSB) {
    CHECK_ARGUMENT_COUNT(ChainableLED, setColorHSB, (args_count == 4));
    CHECK_ARGUMENT_TYPE_ALWAYS(ChainableLED, setColorHSB, 0, number);
    CHECK_ARGUMENT_TYPE_ALWAYS(ChainableLED, setColorHSB, 1, number);
    CHECK_ARGUMENT_TYPE_ALWAYS(ChainableLED, setColorHSB, 2, number);
    CHECK_ARGUMENT_TYPE_ALWAYS(ChainableLED, setColorHSB, 3, number);

    uintptr_t ptr_val;
    jerry_get_object_native_handle(this_obj, &ptr_val);

    ChainableLED* native_ptr = reinterpret_cast<ChainableLED*>(ptr_val);

    double jArg0 = jerry_get_number_value(args[0]);
    unsigned int arg0 = static_cast<unsigned int>(jArg0);
    double jArg1 = jerry_get_number_value(args[1]);
    float arg1 = static_cast<float>(jArg1);
    double jArg2 = jerry_get_number_value(args[2]);
    float arg2 = static_cast<float>(jArg2);
    double jArg3 = jerry_get_number_value(args[3]);
    float arg3 = static_cast<float>(jArg3);

    native_ptr->setColorHSB(arg0, arg1, arg2, arg3);
    return jerry_create_undefined();
}


/**
 * ChainableLED#destructor
 *
 * Called if/when the ChainableLED is GC'ed.
 */
void NAME_FOR_CLASS_NATIVE_DESTRUCTOR(ChainableLED)(const uintptr_t native_handle) {
    delete reinterpret_cast<ChainableLED*>(native_handle);
}

/**
 * mbed_js_wrap_native_object (turns a native ChainableLED object into a JS object)
 */
static jerry_value_t mbed_js_wrap_native_object(ChainableLED* ptr) {
    uintptr_t native_ptr = (uintptr_t) ptr;

    jerry_value_t js_object = jerry_create_object();
    jerry_set_object_native_handle(js_object, native_ptr, NAME_FOR_CLASS_NATIVE_DESTRUCTOR(ChainableLED));

    ATTACH_CLASS_FUNCTION(js_object, ChainableLED, setColorRGB);
    ATTACH_CLASS_FUNCTION(js_object, ChainableLED, setColorHSB);

    return js_object;
}

/**
 * ChainableLED (native JavaScript constructor)
 */
DECLARE_CLASS_CONSTRUCTOR(ChainableLED) {
    CHECK_ARGUMENT_COUNT(ChainableLED, __constructor, (args_count == 3));
    CHECK_ARGUMENT_TYPE_ALWAYS(ChainableLED, __constructor, 0, number);
    CHECK_ARGUMENT_TYPE_ALWAYS(ChainableLED, __constructor, 1, number);
    CHECK_ARGUMENT_TYPE_ALWAYS(ChainableLED, __constructor, 2, number);

    PinName arg0 = PinName(jerry_get_number_value(args[0]));
    PinName arg1 = PinName(jerry_get_number_value(args[1]));
    double jArg2 = jerry_get_number_value(args[2]);
    unsigned int arg2 = static_cast<unsigned int>(jArg2);

    // Create the native object
    ChainableLED* native_obj = new ChainableLED(arg0, arg1, arg2);

    return mbed_js_wrap_native_object(native_obj);
}

void mbed_js_chainableled_setup() {

}
